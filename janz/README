JENS Linux kernel modules
═════════════════════════

These modules are intended to be used with Debian 11 “bullseye”,
with the stock Linux kernel 5.10. Newer Linux kernels up to
about 5.18 should also work.


sch_janz Linux kernel module
────────────────────────────

This is a new qdisc, JENS bespoke. It sorts traffic into one
out of three FIFOs dependeing on their iptos (like the default
Linux qdisc does) and lets them leave paced on the configured
rate (bandwidth limit), possibly after a handover is passed.
ECN CE marking is applied to packets slower than markfree with
a percentage chance rising to 100% if the sojourn time (queue
delay) reaches markfull.

See the tc-janz(8) manpage for details.

Live measurement
────────────────

The debugging filesystem must be mounted:

	$ sudo mount -t debugfs debugfs /sys/kernel/debug

This can also be achieved with an /etc/fstab line as follows:

	debugfs    /sys/kernel/debug  debugfs  defaults  0  0

We’re currently intending to measure the following KPIs:

• queue length (integer, ≤ “limit”) every 5 ms
• timestamp (at least µs) and sojourn time (dito) for every packet

This data is passed from kernel to userspace in records structured
as follows via relayfs:

┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
│ <-ts (timestamp)------------> │typ│fNN│ <eNN> │ <-dNN (data)> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-x8[16] (data)---------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-y8[16] (data)---------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-z (union, substructured as necessary)---------------------> │
└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

The .ts (timestamp) member is a 64-bit unsigned integer,
representing the timestamp of this record in nanoseconds
per CLOCK_MONOTONIC (this is not the packet receive time).
This timestamp has no relation to wall-clock time but is
consistent within measurement as it increases monotonically,
pausing when the system is suspended.

The .type member, an 8-bit unsigned integer, indicates
which record it is, i.e. which meaning it has and how
the data members are filled. This is one of:

• TC_JANZ_RELAY_INVALID (= 0), record was not filled in, do warn
• TC_JANZ_RELAY_PADDING (quietly skip/ignore this record)
• TC_JANZ_RELAY_SOJOURN (an IP packet’s sojourn time)
• TC_JANZ_RELAY_QUEUESZ (amount of packets in the FIFO)

The remaining members are per-record-type data. They are:
• f8 (8-bit unsigned integer)
• e16 (16-bit unsigned integer)
  aliased as e8[2] (8-bit unsigned integer)
• d32 (32-bit unsigned integer)
  aliased as d16[2] (16-bit unsigned integer)
  aliased as d8[4] (8-bit unsigned integer)
• x8, y8 (16-byte arrays e.g. for IP addresses)
• z (sub-structured 16-byte union)
Any data members not specified by the record type must not be accessed.

Record types define the following data members:

• TC_JANZ_RELAY_SOJOURN:
  – d32 packet sojourn time in 1024 ns units
  – e16 ECN marking range/percentage
    ‣ 0xFFFF = above or equal to markfull
    ‣ 0x0000 = below or equal to markfree
    ‣ anything in between = relative value of chance of marking
      (this currently scales linearly based on the sojourn time
      but may in the future use a gradual approach); note roun‐
      ding may make the chance 0x0000 or 0xFFFF if sojourn time
      is near markfree or markfull, respectively
  – f8 bitfield
    ‣ 0:1 ECN bits on enqueue
    ‣   2 ECN bits are valid (0 if they could not be determined)
    ‣ 3:4 ECN bits on dequeue
    ‣   5 currently unused
          (TC_JANZ_RELAY_SOJOURN_xxxx)
    ‣   6 if ECN CE marked from queue delay via markfree/markfull
          (TC_JANZ_RELAY_SOJOURN_MARK), even set if not ECN packet
    ‣   7 (TC_JANZ_RELAY_SOJOURN_DROP) the packet was dropped not sent
  – x8 source IP, if any (if ipver below is 4 or 6)
  – y8 destination IP, if any (ipver…)
  – z struct
    ‣ __u32 psize (raw packet size, including partial Layer 2 framing,
	e.g. 802.11 WLAN, or Ethernet header (though not trailer))
    ‣ __u8 ipver (4 = IPv4; 6 = IPv6; 0 = other and x8/y8 are invalid)
    ‣ __u8 nexthdr (iff ipver; 6 = TCP / 17 = UDP, else {s,d}port invalid)
    ‣ __u16 sport (source port, for TCP or UDP)
    ‣ __u16 dport (destination port, "      " )

      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
      │ <-psize-----> │ i │ n │ <-s-> │ <-d-> │ - │ - │ - │ - │ - │ - │
      └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

• TC_JANZ_RELAY_QUEUESZ:
  – d32 memory usage (bytes), including Linux structural overhead
  – e16 queue length (packets), capped at 0xFFFF

• TC_JANZ_RELAY_PADDING: none; shouldn’t occur but ignore silently

• TC_JANZ_RELAY_INVALID: none; must not occur (do warn)

• TC_JANZ_RELAY_MAX or higher are undefined/reserved for future changes

Subbuffers are TC_JANZ_RELAY_NRECORDS (256) records = 16 KiB each.
The configuration parameter subbufs (can only be set when creating, as
memory must be allocated for the subbuffers) determines the amount of
subbuffers created; use 1 for a suitable default (1024 currently).

IP addresses are formatted as 16 byte IPv6 address straight from the IP
header; Legacy IP addresses are formatted as v4-mapped IPv6, i.e. the
last four octets contain a raw in_addr.

For TC_JANZ_RELAY_SOJOURN the nexthdr field can be 44 if the packet is
fragmented and therefore the port info cannot be obtained, 59 if the info
cannot be obtained for another reason (these numbers correspond to the
respective IPv6 extension header for these purposes and we use them for
IPv4 as well, to signal this). Note 59 is also valid for IPv6 packets that
do not have any payload. 6 is TCP, 17 is UDP, 58/1 are ICMP; for more, see:
https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
