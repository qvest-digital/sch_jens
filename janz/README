JENS Linux kernel modules
═════════════════════════

These modules are intended to be used with Debian 11 “bullseye”,
with the stock Linux kernel 5.10. Newer Linux kernels up to
about 6.4 should also work even though the iproute2 package’s
base version should match the kernel version for other qdiscs.

The current builds are supplied for the following releases:

• Debian: 11 (bullseye) recommended, tested
  +       12 (bookworm): uses the package for 11 and needs
          libbpf0 from bullseye; “should work”, as-is
• Ubuntu: 20.04 LTS (focal) in use at a partner, works
  +       22.04 LTS (jammy): uses same package, untested
  +       24.04 LTS (noble): uses same package, untested

For bookworm (and some *buntu) kernels, please read the note
regarding PREEMPT/PREEMPT_DYNAMIC at the end of this file.


sch_janz Linux kernel module
────────────────────────────

This is a new qdisc, JENS bespoke. It simulates a 5G L4S slice
connection for one UE on egress: it applies sojourn time-based
ECN CE marking, limits the bandwidth to simulate a slower link
than the underlying physical link (Ethernet, or even WLAN) the
simulation uses, can implement handovers, simulate extra delay
on the ingress side (access network/internet), provides inter‐
faces to rapidly change bandwidth (to apply data rate patterns
to simulate changing network conditions) and sophisticated re‐
porting of per-packet and per-queue information.

See the tc-janz(8) manual page and qdisc.md for details.


sch_multijens Linux kernel module
─────────────────────────────────

This qdisc simulates having one sch_janz queue per UE, for
multiple UEs (2 up to, in theory, 256, but 8 is a realistic
number to have). It splits traffic into UEs by reading the
“nfmark” (the MARK target in netfilter); traffic marked with
numbers from 0 to #UEs-1 goes into the respective subqueue,
anything else into the subqueue 0 (first). The pathnames
/sys/kernel/debug/sch_janz below need the sch_janz changed
to sch_multijens.

Each sub-qdisc uses its own relayfs/debugfs reporting channel
but the bandwidth configuration channel is shared. All other
qdisc parameters are currently identical due to lack of a
specific configuration interface; this is a prototype.

See the tc-multijens(8) manual page and qdisc.md for details.


sch_jensvq* kernel modules
──────────────────────────

This prototype explores ECN marking based on the data rate but
sending with twice or thrice the data rate configured. It is
otherwise identical to sch_janz whereever possible.

The reporting concept is based on a “virtual queue” that runs
at the configured data rate, and a “real queue” that runs at
twice or thrice that rate. Most operations, such as dropping
too-old packets, work on the real queue; ECN marking however
uses the calculated queue delay on the virtual queue, so the
*virtual* queue delay packet reports as sojourn time now; the
vq_notbefore1024 field can be used except in very long (17+
seconds) corner cases to obtain the real queue delay, which
is roughly identical (within microseconds) to the reported
one-way delay when no extralatency is used.

The sch_jensvq qdisc allows specification of both virtual and
real link bandwidth (instead of applying a fix factor) and
supports 8 UEs.


Live measurement (not sch_jensvq)
────────────────

The debugging filesystem must be mounted:

	$ sudo mount -t debugfs debugfs /sys/kernel/debug

This can also be achieved with an /etc/fstab line as follows:

	debugfs    /sys/kernel/debug  debugfs  defaults  0  0

We’re currently intending to measure the following KPIs:

• queue length (integer, ≤ “limit”) every time the rate changed
  just before packet transmission, and periodically if nothing
  to send
• timestamp (at least µs) and sojourn time (dito) for every packet

This data is passed from kernel to userspace in records structured
as follows via relayfs:

┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
│ <-ts (timestamp)------------> │typ│fNN│ <eNN> │ <-dNN (data)> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-x8[16] (data)---------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-y8[16] (data)---------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-z (union, substructured as necessary)---------------------> │
└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

The .ts (timestamp) member is a 64-bit unsigned integer,
representing the timestamp of this record in nanoseconds
per CLOCK_MONOTONIC (this is not the packet receive time).
This timestamp has no relation to wall-clock time but is
consistent within measurement as it increases monotonically,
pausing when the system is suspended.

Note: ts is not necessarily the timestamp from when the
packet was physically transmitted when the packet pacing
“backdates” packets to make up for Linux calling the dequeue
method later than requested.

The .type member, an 8-bit unsigned integer, indicates
which record it is, i.e. which meaning it has and how
the data members are filled. This is one of:

• TC_JANZ_RELAY_INVALID (= 0), record was not filled in, do warn
• TC_JANZ_RELAY_PADDING (quietly skip/ignore this record)
• TC_JANZ_RELAY_SOJOURN (an IP packet’s sojourn time)
• TC_JANZ_RELAY_QUEUESZ (amount of packets in the FIFO)
• TC_JANZ_RELAY_WDOGDBG (sch_janzdbg-only performance self-measurement)

The remaining members are per-record-type data. They are:
• f8 (8-bit unsigned integer)
• e16 (16-bit unsigned integer)
  aliased as e8[2] (8-bit unsigned integer)
• d32 (32-bit unsigned integer)
  aliased as d16[2] (16-bit unsigned integer)
  aliased as d8[4] (8-bit unsigned integer)
• x8, y8 (16-byte arrays e.g. for IP addresses) or subdivided, see below
• z (sub-structured 16-byte union)
Any data members not specified by the record type must not be accessed.

Record types define the following data members:

• TC_JANZ_RELAY_SOJOURN:
  – d32 packet sojourn time in 1024 ns units
  – e16 bitfield
    ‣ 0:2 total number of retransmissions for this packet
          (0=none, 1/2/3/4/5=retransmitted)
    ‣ 3:5 “this” number of transmission (0=first, 1=second, …, 5=sixth)
          or 7 (not retransmitted but held up by preceding rexmitted pkt)
    ‣ 6:7 currently unused
    ‣ 8:15 vq_notbefore1024 (bit0‥7)
  – f8 bitfield
    ‣ 0:1 ECN bits on enqueue
    ‣   2 ECN bits are valid (0 if they could not be determined)
    ‣ 3:4 ECN bits on dequeue
    ‣   5 currently unused
          (TC_JANZ_RELAY_SOJOURN_xxxx)
    ‣   6 if ECN CE marked from queue delay via markfree/markfull
          (TC_JANZ_RELAY_SOJOURN_MARK), even set if not ECN packet
    ‣   7 (TC_JANZ_RELAY_SOJOURN_DROP) the packet was dropped not sent
  – x8 source IP, if any (if ipver below is 4 or 6)
  – y8 destination IP, if any (ipver…)
  – z struct
    ‣ __u32 psize (raw packet size, including partial Layer 2 framing,
	e.g. 802.11 WLAN, or Ethernet header (though not trailer));
	bit30‥31 show which FIFO: 0=unknown 1=lowdelay 2=normal 3=bulk
    ‣ __u8 ipver (4 = IPv4; 6 = IPv6; 0 = other and x8/y8 are invalid)
    ‣ __u8 nexthdr (iff ipver; 6 = TCP / 17 = UDP, else {s,d}port invalid)
    ‣ __u16 sport (source port, for TCP or UDP)
    ‣ __u16 dport (destination port, "      " )
    ‣ __u16 vq_notbefore1024 (bit8‥23)
    ‣ __u32 real one-way delay, as pertains to this qdisc (1024 ns units)

      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
      │ ▌<-psize----> │ i │ n │ <-s-> │ <-d-> │ <-q-> │ <-real_owd--> │
      └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

  vq_notbefore1024 is a 24-bit unsigned integer that’s only not 0 when
  sending an actual packet from the jensvq{2,3,4,5}* qdiscs; then, it
  is a timedelta carrying the 1024ns units the packet would be sent
  later than ts in the virtual (DRP capacity) queue, whereas the packet
  actually was sent off the real (double/triple capacity) queue at ts.
  It’s spread over two record fields.

• TC_JANZ_RELAY_QUEUESZ:
  – d32 queue length (bytes)
  – e16 queue length (packets), capped at 0xFFFF
  – f8 bitfield
    ‣   0 handover started
  – x8 subdivided
    ‣ first 64 bit: current virtual queue bandwidth limit (bits/s)
    ‣ second 64 bit: current timestamp offset (ns)
  – y8 subdivided
    ‣ first 64 bit: current real queue bandwidth limit (bits/s)
    ‣ second 64 bit: currently unused
  – z struct: currently unused

      ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
      │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │
      └───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

• TC_JANZ_RELAY_WDOGDBG: see comment in janz_uapi.h and example
  parser in ../jens/jensdmp.c for details

• TC_JANZ_RELAY_PADDING: none; shouldn’t occur but ignore silently

• TC_JANZ_RELAY_INVALID: none; must not occur (do warn)

• TC_JANZ_RELAY_MAX or higher are undefined/reserved for future changes

Subbuffers are TC_JANZ_RELAY_NRECORDS (256) records = 16 KiB each.
The configuration parameter subbufs (can only be set when creating, as
memory must be allocated for the subbuffers) determines the amount of
subbuffers created; use 1 for a suitable default (1024 currently).

IP addresses are formatted as 16 byte IPv6 address straight from the IP
header; Legacy IP addresses are formatted as v4-mapped IPv6, i.e. the
last four octets contain a raw in_addr.

For TC_JANZ_RELAY_SOJOURN the nexthdr field can be 44 if the packet is
fragmented and therefore the port info cannot be obtained, 59 if the info
cannot be obtained for another reason (these numbers correspond to the
respective IPv6 extension header for these purposes and we use them for
IPv4 as well, to signal this). Note 59 is also valid for IPv6 packets that
do not have any payload. 6 is TCP, 17 is UDP, 58/1 are ICMP; for more, see:
https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers

Subbuffers are flushed on queue deconfiguration and when starting a
handover (after the TC_JANZ_RELAY_QUEUESZ indicating so was emitted).


Live measurement (sch_jensvq)
─────────────────────────────

The reporting interface is versioned, the current version number is 2,
/sys/kernel/debug/sch_jensvq/0001:v2-0 would be an example pathname.

This data is passed from kernel to userspace in records structured
as follows via relayfs, once per event or packet sent:

┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
│ <-vts-----------------------> │ <-hts-----------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-srcip-----------------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-dstip-----------------------------------------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-flags-----> │ <-psize-----> │ sport │ dport │ upkts │tos│nh │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vbw-----------------------> │ <-rbw-----------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vqdelay-------------------> │ <-rqdelay-------------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-owdelay-------------------> │ <-ubytes----> │ - │ - │ - │ - │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │ - │
└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

Meaning of the fields:
• u64 vts = virtual timestamp (ns, CLOCK_MONOTONIC, may be backdated)
• u64 hts = human timestamp (time_t, ns, as of reporting)**
• u8[16] srcip, dstip = IP or Legacy IP addresses if ipv ≠ 0
• u32 flags = bitfield (see below)
• u32 psize = raw packet size, including partial L2 framing
• u16 sport, dport = ports if ipv ≠ 0 ∧ nh ∈ { 6, 17 }
• u16 upkts = # of packets enqueued for this UE (without “this” one)
• u8 tos = IPTOS octet of packet (if flags.ipv ≠ 0)
• u8 nh = L3 protocol number if flags.ipv ≠ 0 (IP next header)
• u64 vbw, rbw = current virtual / physical link capacity on the UE
• u64 vqdelay = queue delay ECN marking is calculated from (ns)
• u64 rqdelay = queue delay from channel bandwidth limiting (ns)
• u64 owdelay = extralatency + queue delay + retransmissions (ns)
• u32 ubytes = # of bytes enqueued for this UE (see upkts)

**) mind that vts can be set by root or backdated while hts is not;
    vts must be used to graph when traffic was sent, not hts⚠

    ⚠ vts may be unordered

Note upkts/ubytes encompass both packets from the FIFO as well as
packets held for retransmission or behind a retransmission, i.e. it
does not correspond to a KPI from RAN.

Bandwidth is reported (and set via the control interface) in
bits per second; it is internally measured in ns per byte, so
there will be differences from rounding.

owdelay does not include the delay from being held up (in the
UE on the RAN, in the retransmission loop in sch_jensvq) behind
a packet that is retransmitted. It corresponds to the RAN send time.

The flags field is subdivided as follows:

• 0‥1	type (00=padding/invalid, 01=packet, 10=start of handover, 11=reserved)
• 2‥4	“this” number of transmission (0=first, 1=second, …, 5=sixth)
	or 7 (not retransmitted but held up by preceding rexmitted pkt)
• 5‥7	total number of retransmissions for this packet
	(0=none, 1/2/3/4/5=retransmitted)
• 8	attempted ECN CE marking
• 9	valid flag for the two following fields
• 10‥11	ECN bits on enqueue
• 12‥13	ECN bits on dequeue
• 14‥15	IP version (00=not IP, 01=IPv6, 10=IPv4, 11=reserved)
• 16	dropped
• 17	bypass packet (excluded from bandwidth calculation, UE#0 only)
• 18‥20	UE number
• 21‥31	reserved (MBZ)

All integers are written in host-native endianness.

For padding records, none of the other fields have been filled in.

For start-of-handover records, only the following fields are valid:
• vts, hts
• upkts, ubytes
• flags (currently exactly 2)
• vbw is in CLOCK_MONOTONIC when traffic will resume at the earliest

For packet records with bypass flag set the UE number is not filled
in (feel free to consider the bypass queue as UE#8); upkts/ubytes
report the bypass’ amounts; vbw, rbw, vqdelay, rqdelay are invalid.

For dropped packets, vbw, rbw, vqdelay, rqdelay are invalid.

If a UE is starving (cannot enqueue if the sum of retransmissions,
bypass plus other UEs’ queues reaches the limit) a warning is shown
in klog; gnet stats drops accounting counts these occurrences, and
the record only contains the flags type=1, dropped=1, uenum, and the
fields vts, hts, psize, upkts, ubytes.


Control interface (not sch_jensvq)
─────────────────

The control interface is versioned; the current version number is 1
as can be seen in janz_uapi.h (JANZ_CTLFILE_VERSION macro). All data
must be in host byteorder as with the above.

To use this, open the v1 file corresponding to the 0 file for the
reporting, for example: /sys/kernel/debug/sch_janz/0001:v1

Keep this file open, only ever write to it (no seek, read or so),
close it only once you don’t need it any more at program termination,
or when unconfiguring the sch_janz qdisc.

Then, you can write(2) the janz_ctlfile_pkt structure many times per
second. Do note that the structure must be written with one write(2)
call (not buffered or split), and the amount of bytes written must
be precisely the struct size (no more, no less), otherwise, an error
will be returned. The expected amount is also exposed as the nominal
file’s size.

For v1, the janz_ctlfile_pkt structure is 8 bytes long:

      ┌───┬───┬───┬───┬───┬───┬───┬───┐
      │ <-bits_per_second-----------> │
      └───┴───┴───┴───┴───┴───┴───┴───┘

The members are:

• u64 bits_per_second: the bandwidth to pace outgoing packets to,
  in bits per second (default: 10'000'000), also known as the
  virtual queue bandwidth or virtual link capacity; corresponds to
  the “rate” tc-janz(8) parameter; as of jens19, changing this via the
  control interface triggers TC_JANZ_RELAY_QUEUESZ writing before the
  next writing of TC_JANZ_RELAY_SOJOURN; before, it did not trigger

Only write control packets when you really have to change something;
do not, for example, send the same bandwidth rate over and over again.

For sch_multijens, write uenum consecutive janz_ctlfile_pkt structures
at once, UE#00 first, UE#01 second, etc.

For other control operations such as starting a handover, you will
still need tc change.


Control interface (sch_jensvq)
──────────────────────────────

The control interface is versioned, the current version number is 2,
/sys/kernel/debug/sch_jensvq/0001:v2-c would be an example pathname.

Keep this file open, only ever write to it (no seek, read or so),
close it only once you don’t need it any more at program termination,
or when unconfiguring the corresponding sch_jensvq qdisc.

Then, you can write(2) the jensvq_ctlfile_pkt structure many times per
second. Do note that the structure must be written with one write(2)
call (not buffered or split), and the amount of bytes written must
be precisely the struct size (no more, no less), otherwise, an error
will be returned. The expected amount is also exposed as the nominal
file’s size.

For v2, the jensvq_ctlfile_pkt structure is 128 bytes long:

┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┐
│ <-vq_bps[0]-----------------> │ <-rq_bps[0]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[1]-----------------> │ <-rq_bps[1]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[2]-----------------> │ <-rq_bps[2]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[3]-----------------> │ <-rq_bps[3]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[4]-----------------> │ <-rq_bps[4]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[5]-----------------> │ <-rq_bps[5]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[6]-----------------> │ <-rq_bps[6]-----------------> │
├───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┼───┤
│ <-vq_bps[7]-----------------> │ <-rq_bps[7]-----------------> │
└───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┴───┘

This is, the u64 bits_per_second for the virtual and real queue
times 8 (number of UEs).

As a special accomodation, if rq_bps is 0 then vq_bps is the
amount of nanoseconds to stop traffic for a handover instead
(with a maximum of 3600 seconds).


Performance considerations
──────────────────────────

$ ps ax | fgrep ksoftirqd/
   12 ?        S      0:20 [ksoftirqd/0]
   19 ?        S      0:07 [ksoftirqd/1]
   24 ?        S      0:01 [ksoftirqd/2]
28085 pts/1    S+     0:00 grep -F ksoftirqd/
$ sudo renice -n -15 12 19 24
$ ps ax | fgrep ksoftirqd/   # to see whether this worked
   12 ?        S<     0:20 [ksoftirqd/0]
   19 ?        S<     0:07 [ksoftirqd/1]
   24 ?        S<     0:01 [ksoftirqd/2]
28111 pts/1    S+     0:00 grep -F ksoftirqd/

This can, however, make other tasks on the same system slower.
However, a JENS instance’s primary job is to forward packets
with as low latency and latency’s jitter as possible, so this
may possibly be warranted.

In our experiments, however, use of a -rt kernel *increased*
latency and jitter both, so do not use them.

For Linux kernels with CONFIG_PREEMPT_DYNAMIC this means to
please add “preempt=none” to the kernel command line (e.g. in
/etc/default/grub to the GRUB_CMDLINE_LINUX_DEFAULT option).
The Debian bookworm kernel, according to `uname -a`, has it:
| Linux … 6.1.0-10-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.38-2 (2023-07-27) x86_64 GNU/Linux
`-------------------------------^^^^^^^^^^^^^^^
