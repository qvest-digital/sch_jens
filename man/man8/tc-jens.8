.\" part of sch_jens (fork of sch_fq_codel), Deutsche Telekom LLCTO
.\"-
.if \n(.g .hlm 0
.Dd January 19, 2022
.Dt TC\-JENS 8
.Os Linux
.Sh NAME
.Nm tc\-jens
.Nd E/// PoC-like traffic scheduler
.Sh SYNOPSIS
.Nm tc
.Ic qdisc ...\& Nm jens
.Op Ic limit Ar PACKETS
.Op Ic memory_limit Ar BYTES
.Op Ic drop_batch Ar SIZE
.Op Ic flows Ar NUMBER
.Op Ic quantum Ar BYTES
.Op Ic interval Ar TIME
.Op Ic target Ar TIME
.Op Ic markfree Ar TIME
.Op Ic markfull Ar TIME
.Op Ic subbufs Ar NUMBER
.Op Ic nouseport
.Sh DESCRIPTION
JENS is a network limitation simulator used in an Adaptive Managed Latency
scenario to aid in developing aware applications.
The
.Nm jens
scheduler is a Linux kernel module developed as part of JENS that provides
ECN CE
.Pq Dq congestion experienced
marking on ECN-enabled traffic flows using marking algorithms resembling
the real-life PoC scenario as closely as possible.
.Pp
For practical reasons,
.Nm sch_jens
is based on
.Nm sch_fq_codel
which uses a stochastic model to classify incoming packets into different
flows based on their source and destination IP addresses and port numbers
providing a fair share of the bandwidth to all flows using the queue by
applying a controlled delay scheme.
.Ss What does that mean?
.Nm sch_jens ,
as
.Nm sch_fq_codel ,
pre-allocates a hashtable sized for
.Ar flows
traffic flows, as specified above.
The hashtable is used later to quickly look up the individual packets
belonging to a flow when necessary, as well as to distribute the
available bandwidth across flows (which is not as relevant in the JENS
scenario which tests a single application at first).
All connections belong to at least one flow (but they can belong to
more than one due to the use of a hashtable; this is not a problem in
reality).
All incoming packets are queued in a FIFO, the flow classification is
only used to
.Dq mark
them as belonging to their flow(s).
.Pp
Normally, incoming packets are scheduled to
.Dq go out
to the network as quickly as possible and in the order they are
received.
Should, however, a connection
.Dq hog
the network, the algorithm ensures that the other flows also get
to send packets so no connection can stave another.
The FIFO queue has a specific size, both a
.Ar limit
on the amount of total packets in it, as well as a
.Ar memory_limit
to put an upper cap on the total amount of RAM used for it
(which is not normally reached before the packet
.Ar limit
kicks in).
Should one of the limits be reached, the scheduler looks for the
.Dq fat flow ,
i.e. the flow taking up the most resources, and drops the first
packets belonging to it from the queue until either the backlog
of the flow is halved or
.Ar drop_batch
is reached, whatever comes first.
(The reason packets are dropped from the beginning of the queue,
rather than the end, is that the recipients can react faster to this.)
In
.Nm sch_jens ,
this is the only way ECN-capable packets are dropped; in all other
situations where
.Nm sch_fq_codel
would otherwise drop a packet, it is ECN CE
.Pq Dq congestion experienced
marked instead.
Packets that are not ECN-capable can, and will, be dropped for
lesser offences though; AML is approaching an L4S-like scenario
which heavily depends on ECN for traffic control.
.Pp
.Nm sch_jens
furthermore marks all packets that take at least
.Ar markfull
to process
.Pq Dq sojourn time
as well as a percentage of all packets that take longer than
.Ar markfree
based on how close their sojourn time is to the two endpoints,
.Ar markfree
marking 0% of the packets, whereas
.Ar markfull
marking 100% of the packets; this is currently calculated
linearly.
The
.Nm sch_fq_codel
model further determines whether at least one packet within
.Ar interval
passes the queue faster than
.Ar target
and begins ECN-marking (or dropping) if not; this is the
.Dq controlled delay
part of the scheduler.
(By setting
.Ar markfull
to at least
.Ar target ,
this can be ignored in practice.)
.Sh PARAMETERS
.Bl -tag -width XX
.It Ic limit
is a hard limit on the real queue size.
When this limit is reached, packets are dropped.
Default: 10240\ packets
.It Ic memory_limit
is a hard limit on the real queue memory usage.
When this limit is reached, packets are dropped.
Default: 32\ MiB
.It Ic drop_batch
limits the amount of packets dropped in
.Dq queue is full
scenarios at a time.
When reducing
.Ar limit
and/or
.Ar flows ,
this value should be considered and possibly lowered as well.
Default: 64
.It Ic flows
is the number of flows into which the incoming packets are classified.
Due to the stochastic nature of hashing, multiple flows may end up
being hashed into the same slot.
Newer flows have priority over older ones.
This parameter can only be set at load time since memory has to be
allocated for the hash table.
This should be roughly an eighth to a tenth of
.Ar limit
(setting it too high causes CPU overload when dropping).
Default: 1024
.It Ic quantum
is the number of bytes used as
.Dq deficit
in the fair queuing algorithm.
Default: 1514
(corresponding to the Ethernet MTU plus the hardware header length of 14 bytes)
.It Ic interval
is used to ensure that the measured minimum delay does not become too stale.
The minimum delay must be experienced in the last epoch of length
.Ar interval .
It should be set on the order of the worst-case RTT through the bottleneck
to give endpoints sufficient time to react, ideally five to ten times
.Ar target .
Default: 100\ ms
.It Ic target
is the acceptable minimum standing/persistent queue delay.
This should be set to roughly the typical RTT of one packet, erring on
the larger side.
Default: 5\ ms
.It Ic markfree
is the maximum queue delay packets are allowed to sojourn in the queue
without the extra ECN CE marking done for JENS.
Default: 4\ ms
.It Ic markfull
is the minimum queue delay at which packets will be marked (see above)
with 100% probability.
Default: 14\ ms
.It Ic subbufs
enables debugfs functionality, for use with
.Nm jensdmp
or its Java\(rg wrapper.
Set this to 0 to disable the functionality, any other value to enable it;
1 will use a suitable default amount of subbuffers (currently 1024),
any other value is used as number of subbuffers (containing 256 records,
each sized 16 bytes, that is, 4\ KiB per subbuffer).
This parameter can only be set at load time because memory has to be allocated.
Default: 0
.It Ic nouseport
Omit both source and destination port number from the hash for
queue classification.
This can be used to simulate a single, multiplexed, RAN connection
for all connections between each same pair of hosts.
.El
.Sh STATISTICS
Currently the same as in
.Xr tc\-fq_codel 8 ,
except
.Li ecn_mark
counts the packets ECN CE-marked due to being over
.Ic target
or
.Ic markfull
or that actually were marked while being over
.Ic markfree .
.Pp
Further statistics are available using the debugfs functionality, enabled with
.Ic subbufs Pq see above ;
these are high-traffic, fine-grained, so enable only if needed and make sure
to limit traffic.
.Sh EXAMPLES
Set up a queue with standard parameters and display its statistics:
.Bd -literal
$ sudo tc qdisc add dev eth0 root handle 2: jens
$ sudo tc -s qdisc show dev eth0
qdisc jens 2: root refcnt 2 limit 10240 memory_limit 32MB \e
    drop_batch 64 flows 1024 quantum 1514 interval 100ms \e
    target 5ms markfree 4ms markfull 14ms subbufs 0
 Sent 1782 bytes 5 pkt (dropped 0, overlimits 0 requeues 0)
 backlog 0b 0p requeues 0
  maxpacket 0 drop_overlimit 0 new_flow_count 0 ecn_mark 0
  new_flows_len 0 old_flows_len 0
.Ed
.Sh SEE ALSO
.Xr tc 8 ,
.Xr tc\-fq_codel 8
.Pp
.Pa /usr/share/doc/sch\-jens\-dkms/README.gz
.Pp
.Pa /usr/share/doc/iproute2/examples/JensReaderDemo.java
.Sh AUTHORS
.An -nosplit
.Nm sch_jens
has been developed by
.An mirabilos Aq t.glaser@tarent.de
for Deutsche Telekom LLCTO, based on
.Nm FQ_CoDel
by
.An Eric Dumazet
and a manual page by
.An Vijay Subramanian .
.Sh CAVEATS
Much of the information in this manual page is actually undocumented
or underdocumented for
.Nm sch_fq_codel
and has been collected based on casual study of the source code,
independent descriptions of FQ_CoDel, mailing list posts, etc. and
may therefore not be entirely correct.
.Pp
.Nm tc
handles are per-interface; debugfs pathnames are global.
When using the debugfs functionality
.Pq non-zero Ic subbufs ,
make sure that no two
.Nm sch_jens
queues have the same handle, globally.
